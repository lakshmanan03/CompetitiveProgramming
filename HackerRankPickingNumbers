import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'pickingNumbers' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts INTEGER_ARRAY a as parameter.
     */

    public static int pickingNumbers(List<Integer> nos) {
    
        Collections.sort(nos);
         int max=0;         
         int left=nos.get(0);
         int leftCount=1;
         int right=0;
         int rightCount=0;
         int current=0;
         int pos=1;        
         while(nos.get(pos)==left)
         {
             leftCount++;
             pos+=1;
         }         
         right=nos.get(pos);
         rightCount++;
         for( int i =pos+1 ;i <nos.size();i++)
         {
             current=nos.get(i);
             if(current==right)
            {
                rightCount++;
                if(i==nos.size()-1)
                {
                    if(Math.abs(right-left)==1)
                    max =Math.max(max,rightCount+leftCount);max =Math.max(max,rightCount+leftCount);
                }
            } 
            else
            {        
                if(Math.abs(right-left)==1)
                max =Math.max(max,rightCount+leftCount);
                left=right;
                leftCount=rightCount;
                rightCount=1;
                right=current;
            }
         }
         
         
        
        
        return max;
    

    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> a = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        int result = Result.pickingNumbers(a);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
