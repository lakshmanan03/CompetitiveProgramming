package com.hackerRank;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Queue;

public class GridPuzzle {
	public static class Position {
		int x, y;
		int length;
		String layout;
		public Position(int x, int y, int length, String layout) {
			super();
			this.x = x;
			this.y = y;
			this.length = length;
			this.layout = layout;
		}
	}
	public static Queue<String> SolvePuzzle(Queue<Position> positions, Map<Integer, Queue<String>> wordsMap) {
		 Queue<String> result = new LinkedList<>();
		int completedSize= positions.size();
		return solveCrossWord(positions,result,wordsMap,completedSize);
				 
	}

	public static  Queue<String> solveCrossWord(Queue<Position> positions, Queue<String> result,Map<Integer, Queue<String>> wordsMap, int completedSize)
	{
		if(result.size()==completedSize)
		{
			return result;
		}
		
		Position currentPosition= positions.remove();
	Queue<String> words=wordsMap.get(currentPosition.length);
		for(String toSolve:words) {
		result.add(toSolve);
		String [][] grid= BuildGrid(3);		
	    grid=fillWord(grid,currentPosition);
	     int[] intersection= new int[2];
		  boolean matchFound=false;
		  Queue<String> matchedWords= new LinkedList<>();
		  Queue<Position> matchedPositions= new LinkedList<>();
		for (int i = 0;i<positions.size();i++)
		{  			
			Position  posToBeCompared=positions.peek();
			boolean added=false;
			intersection =findPosition(grid,posToBeCompared);
			int charPosCurrentWord = findCharPosition(intersection,currentPosition);
			int charPosCrossWord =findCharPosition(intersection,posToBeCompared);
		    char CharToBeMatched = toSolve.charAt(charPosCurrentWord);
		    String matchedWord="";
		  Queue<String> crossingWords=wordsMap.get(posToBeCompared.length);
		 
		    for (String crossingWord:crossingWords)
		    {   
		    	if(crossingWord!=toSolve)
		    	if(crossingWord.charAt(charPosCrossWord)==toSolve.charAt(charPosCurrentWord))
		    	{
		    		matchedWord=crossingWord;
		    		positions.remove(posToBeCompared);
		    		result.add(matchedWord);
		    		matchFound=true;
		    		added=true;
		    		break;
		    	}
		    }
		    if(!matchFound)
		    {
		    	if(added) {
		    	positions.add(posToBeCompared);
		    	result.remove(matchedWord);
		    	}
		    	result.remove(toSolve);
		    		    	
		    }  
		   
		}  
		if(matchFound)
			break;
		
		}
		      positions.remove(currentPosition);
			  solveCrossWord(positions,result,wordsMap,completedSize);
		    
		   return result;
	}

	public static int findCharPosition(int[] intersection, Position currentPosition) {
		
		if(currentPosition.x==intersection[0])
		{
		return intersection[1]-currentPosition.y;
		}	
	    return intersection[0]-currentPosition.x;
		
	} 

	public static int[] findPosition(String[][] grid, Position position) {
		
		int x = position.x;
		int y = position.y;
		int[] intersection= new int[2];
		if(position.layout.equals("vertical"))
		{
		for(int i=x; i<position.length;i++ )
		{  
			
		if(grid[i][y]=="-")
		
		{
			intersection[0]=i;
			intersection[1]=y;
			break;
		}
	     		
		}
		}
		else
		{
			for(int i=y; i<position.length;i++ )
			{
				if(grid[x][i]=="-")
				{
					intersection[0]=x;
					intersection[1]=i;
					break;
				}
				 
			}
		}
		return intersection;
	}

	public static String[][] fillWord(String[][] grid, Position currentPosition) {
		
		int x = currentPosition.x;
		int y = currentPosition.y;
		
		if(currentPosition.layout.equals("vertical"))
		{
		for(int i=x; i<currentPosition.length;i++ )
		{
			 grid[i][y]="-";
		}
		}
		else
		{
			for(int i=y; i<currentPosition.length;i++ )
			{
				 grid[x][i]="-";
			}
		}
		return grid;
	}

	public static String[][] BuildGrid(int length) {		
		String[][] grid = new String[length][length];
		for(int i =0;i<length;i++)
		{
			for(int j=0;j<length;j++)
			{
				grid[i][j]="+";
			}
		}
		return grid;
		
	}

	public static Queue<Position> populatePositions(String[] grid, Map<Integer, Queue<String>> wordsMap) {

		Queue<Position> positions = new LinkedList<>();

		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid.length; j++) {
				if (grid[i].charAt(j) == '-') {
					// vertical positions
					Position positionv = new Position(i, j, 0, "");
					int vlength = 0;
					int row = i;
					if (row != 0 && grid[row - 1].charAt(j) == '-') {

					} else {
						while (row < grid.length && grid[row].charAt(j) == '-') {
							vlength++;
							row++;
						}
						positionv.length = vlength;
						positionv.layout = "vertical";
						if (wordsMap.containsKey(positionv.length) && positionv.length > 1)
							positions.add(positionv);
					}

					// horizontal positions
					Position positionh = new Position(i, j, 0, "");
					int hlength = 0;
					int column = j;

					if (column != 0 && grid[i].charAt(column - 1) == '-') {

					} else {
						while (column < grid.length && grid[i].charAt(column) == '-') {
							hlength++;
							column++;
						}
						positionh.length = hlength;
						positionh.layout = "horizontal";
						if (wordsMap.containsKey(positionh.length) && positionh.length > 1)       
							positions.add(positionh);
					}

				}

			}
		}
		return positions;
	}
	public static void main(String[] args) {
		String grid[] = { "+-+", "---", "---" };
		Queue<String> words = new LinkedList<>();
		words.add("Hit");
		words.add("pit");
		words.add("ate");		
		Map<Integer,Queue<String>> wordsMap = new HashMap<>();
		for (String word : words) {
			int key= word.length();
			if(wordsMap.containsKey(key))
			{
			Queue<String> toAdd=wordsMap.get(key);
			toAdd.add(word);
			wordsMap.put(key,toAdd);
			}	
			else
			{
			Queue<String> newQ = new LinkedList<>();
			newQ.add(word);
			wordsMap.put(key,newQ);
			}
		}
		Queue<Position> positions = populatePositions(grid,wordsMap);	
		Queue<String> solved = SolvePuzzle(positions, wordsMap);
		for (String word : solved) {
			System.out.println(word);
		}
	}

}
