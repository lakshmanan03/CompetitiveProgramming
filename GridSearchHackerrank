import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the gridSearch function below.
    static String gridSearch(String[] G, String[] P) {

          int patpos=0;          
          boolean matchfound=false;
        for (int i =0;i<G.length;i++)
        {     
            if(patpos< P.length)
            matchfound =kmpSearch(G[i].toCharArray(),P[patpos].toCharArray());
              if(matchfound)
              {
                patpos++;
                 if(patpos==P.length)
                 return "YES";
              }
              else
              {
               
                  patpos=0;
              }
        }
       

        return "NO";
    }
        
    public static int[] computeLps(char[] pat)
    {
        int lps[]=new int[pat.length];         
        int index=0;
        int moving=1;
        lps[0]=0;
        while (moving<pat.length)
        {
            if(pat[index]==pat[moving])
            {
                lps[moving]=index+1;
                moving++;
                index++;                 
            }
            else
            {
                if(index!=0)
                {
                    index=lps[index-1];
                    
                }
                else {
                    
                    lps[moving]=0;
                    moving++;
                }
            }
        }
        return lps;
    }

    public static boolean kmpSearch(char[] sequence, char[] pattern)
    {
        int[] lps=computeLps(pattern);
        int sindex=0;
        int pindex=0;
        
        while (sindex <sequence.length && pindex<pattern.length)
        {
            if(sequence[sindex]==pattern[pindex])
            {
                sindex++;
                pindex++;
            }
            else
            {
                if(pindex!=0)
                {
                pindex=lps[pindex-1];
                }
                else
                {
                    sindex++;
                }
                
            }
        }
        if(pindex==pattern.length)
        {
            return true;
        }
        
        return false;
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int t = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int tItr = 0; tItr < t; tItr++) {
            String[] RC = scanner.nextLine().split(" ");

            int R = Integer.parseInt(RC[0]);

            int C = Integer.parseInt(RC[1]);

            String[] G = new String[R];

            for (int i = 0; i < R; i++) {
                String GItem = scanner.nextLine();
                G[i] = GItem;
            }

            String[] rc = scanner.nextLine().split(" ");

            int r = Integer.parseInt(rc[0]);

            int c = Integer.parseInt(rc[1]);

            String[] P = new String[r];

            for (int i = 0; i < r; i++) {
                String PItem = scanner.nextLine();
                P[i] = PItem;
            }

            String result = gridSearch(G, P);

            bufferedWriter.write(result);
            bufferedWriter.newLine();
        }

        bufferedWriter.close();

        scanner.close();
    }
}
